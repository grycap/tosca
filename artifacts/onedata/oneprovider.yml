---
- hosts: localhost
  connection: local
  vars:

    IM_NODE_PUBLIC_IP_COMMA: "{{ IM_NODE_PUBLIC_IP | replace('.' ,',' ) }}"

    # Oneprovider
    _NAMESPACE: "{{ onedata_namespace }}"
    _ONEPROVIDER_CONTAINER_TAG: "{{ onedata_version }}"
    _DOCKER_ONEDATA_REST_CLI_VERSION: "{{ onedata_version }}"
    _ONEPROVIDER_REGISTRATION_TOKEN: "{{ onedata_registration_token }}"   # obtained from DATAHUB --> only 1 use
    _ONEPROVIDER_GEO_LAT: "{{ onedata_geo_position[0] }}"
    _ONEPROVIDER_GEO_LONG: "{{ onedata_geo_position[1] }}"
    _ONEPROVIDER_CONTACT_EMAIL: "{{ onedata_contact_email }}"
    _ONEPROVIDER_NAME: "{{ onedata_name }}" # oneprovider-upv
    _ONEPROVIDER_SUBDOMAIN_ONEZONE: "{{ onedata_subdomain_onezone }}" # upv
    _ONEPROVIDER_DOMAIN_ONEZONE: "{{ onedata_domain_onezone }}"
    _ONEPANEL_EMERGENCY_PASSPHRASE: "{{ oneplanel_emergency_passphrase }}"
    ONE_ZONE_API_KEY: "{{ onedata_onezone_api_key }}"

    # Oneprovider kubernetes volumes
    __PATH_CACERTS: /opt/nfs/cacerts
    __PATH_PERSISTENCE: /opt/nfs/persistence
    __PATH_SPACES: /opt/nfs/spaces # Be careful! Same path in the host as the container

#    onedata_spaces:
#      - id: "ID"  # obtained from DATAHUB
#      - mame: "name"
#      - size: 107374182400 # 100 GB
  pre_tasks:
    - name: Create dir for NFS
      file: path=/opt/nfs state=directory mode=755

  roles:
    - role: 'grycap.nfs'
      nfs_mode: 'front'
      nfs_only_v4: true
      nfs_exports:
        - path: "/opt/nfs"
          export: "vnode-*.localdomain(fsid=0,rw,async,no_root_squash,no_subtree_check,insecure)"

  tasks:
    - name: Create a directories for PVs
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ __PATH_CACERTS }}"
        - "{{ __PATH_PERSISTENCE }}"
        - "{{ __PATH_SPACES }}"

    - name: Check oneprovider kubernetes directory
      stat:
        path: /root/oneprovider/Oneprovider_isConfigured
      register: kubernetes_directory_output

    - name: Create /root/oneprovider and the Kubernetes yaml to deploy Oneprovider
      when: not kubernetes_directory_output.stat.exists
      block:
        - name: Install prerequisites of k8s
          pip:
            name: "{{ item }}"
          with_items:
            - openshift
            - PyYAML
            - docker

        - name: "Create /root/oneprovider"
          file:
            path: "/root/oneprovider"
            state: directory
            mode: "755"

        - name: "Download kubernetes yaml template"
          get_url:
            dest: "/root/oneprovider/oneprovider.yaml.j2"
            url: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/onedata/kubernetes/oneprovider.yaml.j2
            mode: "644"

        - name: "Create kubernetes yaml"
          template:
            dest: "/root/oneprovider/oneprovider.yaml"
            src: "/root/oneprovider/oneprovider.yaml.j2"
            mode: "644"

        - name: "Download PV and PVC yaml template for spaces"
          get_url:
            dest: "/root/oneprovider/pv_pvc_storage.yaml.j2"
            url: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/onedata/kubernetes/onepropv_pvc_storagevider.yaml.j2
            mode: "644"

        - name: "Create PV and PVC yaml"
          template:
            dest: "/root/oneprovider/pv_pvc_storage_{{ item.id }}.yaml"
            src: "/root/oneprovider/pv_pvc_storage.yaml.j2"
            mode: "644"
          loop: "{{ onedata_spaces }}"

        - name: "Donwload support_spaces.szh"
          get_url:
            path: "/root/oneprovider/support_spaces.zsh"
            url: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/onedata/kubernetes/support_spaces.zsh
            mode: "770"

        - name: "Create oneprovider_configuration_externalIp.sh"
          get_url:
            path: "/root/oneprovider/oneprovider_configuration_externalIp.sh"
            url: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/onedata/kubernetes/oneprovider_configuration_externalIp.sh
            mode: "770"

        - name: "Create waiting_oneprovider_script.zsh"
          get_url:
            path: "/root/oneprovider/waiting_oneprovider_script.zsh"
            url: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/onedata/kubernetes/waiting_oneprovider_script.zsh
            mode: "770"

        - name: Deploying Namespace, Oneprovider DNS services
          command: kubectl apply -f /root/oneprovider/oneprovider.yaml
          environment:
            KUBECONFIG: "/etc/kubernetes/admin.conf"

        - name: Deploying PersistentVolumes, PersistentVolumeClaims per each space
          command: kubectl apply -f /root/oneprovider/pv_pvc_storage_{{ item.id }}.yaml
          environment:
            KUBECONFIG: "/etc/kubernetes/admin.conf"
          loop: "{{ onedata_spaces }}"

        - name: Create overlay.config file in the NFS directory
          command: "/root/oneprovider/oneprovider_configuration_externalIp.sh {{ __PATH_PERSISTENCE }} /root/oneprovider/overlay.config"

        - name: Wait until Onepanel can receive REST calls
          wait_for:
            timeout: 1200
            port: 9443 # Onepanel port
            host: "{{ IM_NODE_PUBLIC_IP }}"  # "{{ _ONEPROVIDER_SUBDOMAIN_ONEZONE }}.{{ _ONEPROVIDER_DOMAIN_ONEZONE }}"
            sleep: 30
            state: drained

        - name: Create /root/oneprovider/Oneprovider_isConfigured
          file:
            path: /root/oneprovider/Oneprovider_isConfigured
            state: touch
            mode: u=rw,g=r,o=r

        - name: "Create docker container that uses the API REST of Onepanel to notify when the Oneprovider is configured"
          docker_container:
            name: onedata-monitoring
            image: "onedata/rest-cli:{{ _DOCKER_ONEDATA_REST_CLI_VERSION }}"
            state: started
            detach: false
            network_mode: bridge
            command: /waiting_oneprovider_script.zsh
            env:
              ONEZONE_HOST: "https://{{ _ONEPROVIDER_DOMAIN_ONEZONE }}"
              ONEZONE_API_KEY: "{{ ONE_ZONE_API_KEY }}"
              ONEPANEL_BASIC_AUTH: "onepanel:{{ _ONEPANEL_EMERGENCY_PASSPHRASE }}"
              ONEPANEL_HOST: "https://{{ _ONEPROVIDER_SUBDOMAIN_ONEZONE }}.{{ _ONEPROVIDER_DOMAIN_ONEZONE }}:9443"
              ONEPROVIDER_HOST: "https://{{ _ONEPROVIDER_SUBDOMAIN_ONEZONE }}.{{ _ONEPROVIDER_DOMAIN_ONEZONE }}"
            volumes:
              - "/root/oneprovider/Oneprovider_isConfigured:/res"
              - "/root/oneprovider/waiting_oneprovider_script.zsh:/waiting_oneprovider_script.zsh"

        - name: "Support Onedata spaces using the API REST - onedata/rest-cli:latest"
          docker_container:
            name: onedata-spaces
            image: "onedata/rest-cli:{{ _DOCKER_ONEDATA_REST_CLI_VERSION }}"
            state: started
            detach: false
            network_mode: bridge
            command: /support_spaces.zsh
            env:
              ONEZONE_HOST: "https://{{ _ONEPROVIDER_DOMAIN_ONEZONE }}"
              ONEZONE_API_KEY: "{{ ONE_ZONE_API_KEY }}"
              ONEPANEL_BASIC_AUTH: "onepanel:{{ _ONEPANEL_EMERGENCY_PASSPHRASE }}"
              ONEPANEL_HOST: "https://{{ _ONEPROVIDER_SUBDOMAIN_ONEZONE }}.{{ _ONEPROVIDER_DOMAIN_ONEZONE }}:9443"
              ONEPROVIDER_HOST: "https://{{ _ONEPROVIDER_SUBDOMAIN_ONEZONE }}.{{ _ONEPROVIDER_DOMAIN_ONEZONE }}"
              _SPACE_ID: "{{ item.id }}"
              _SPACE_SIZE: "{{ item.size }}"
              _SPACE_NAME: "{{ item.name }}"
            volumes:
              - "/root/oneprovider/support_spaces.zsh:/support_spaces.zsh"
          loop: "{{ onedata_spaces }}"
