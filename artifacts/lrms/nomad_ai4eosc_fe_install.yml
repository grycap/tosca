---
- hosts: localhost
  connection: local
  vars:
    server_list: "{{ nomad_server_list | default([ansible_default_ipv4.address]) }}"
    server_private_ip: "{{ IM_NODE_PRIVATE_IP | default(ansible_default_ipv4.address) }}"
    server_public_ip: "{{ IM_NODE_PUBLIC_IP | default('') }}"
    launch_traefik: "{{ nomad_launch_traefik | default(false) }}"
    nvidia_support: false
    certs_url: "{{ consul_cert_url | default('') }}"
    consul_join: "{{ consul_server_join | default('') }}"
    API_HOST: "{{ ai4eosc_api_host | default('') }}"
    DASHBOARD_HOST: "{{ ai4eosc_dashboard_host | default('') }}"
    OIDC_CLIENT_ID: "{{ ai4eosc_oidc_client_id | default('') }}"
    OIDC_ISSUER: "{{ ai4eosc_oidc_issuer | default('') }}"
    OIDC_CLIENT_SECRET: "{{ ai4eosc_oidc_client_secret | default('') }}"
  pre_tasks:
    - name: Convert server_list to list
      set_fact:
        server_list:
          - "{{ server_list }}"
      when:
        - server_list is string
    - name: Set primary_datacenter
      set_fact:
        consul_primary_datacenter: "{{ nomad_input_dc | default('ifca-ai4eosc') }}"
    - name: Set primary_datacenter
      set_fact:
        consul_primary_datacenter: "{{ consul_join_datacenter | default('ifca-ai4eosc') }}"
      when: consul_join != ''
  tasks:
    - name: Install git
      package:
        name: git
        state: present

    - name: Download Ansible roles
      git:
        repo: https://github.com/ai4os/ai4-ansible
        dest: /opt/ai4-ansible
        version: "{{ ai4_ansible_version | default('master') }}"
        force: false

    - name: Set all_wn
      set_fact:
        all_wn: "{{ groups['wn'] }}"

    - name: Add pub nodes to all_wn
      set_fact:
        all_wn: "{{ all_wn + groups['wn_pub'] }}"
      when: groups['wn_pub'] is defined

    - name: Add gpu nodes to all_wn
      set_fact:
        all_wn: "{{ all_wn + groups['wn_gpu'] }}"
      when: groups['wn_gpu'] is defined


    - when: consul_join != ''
      block:

        - name: Add new servers to other server nodes
          add_host:
            name: '{{ item }}'
            groups:
              - nomad_new_servers
              - consul_new_servers
              - consul_new
              - nomad_new
              - consul_new_master
          with_items: "{{ groups['front'] }}"

        - name: Enable new Traefik
          add_host:
            name: "{{ groups['wn_pub'][0] }}"
            groups:
              - traefik_new_master
          when: launch_traefik and 'wn_pub' in groups and groups['wn_pub'] | length > 0

        - name: Add new client groups
          add_host:
            name: '{{ item }}'
            groups:
              - nomad_new_cpu_clients
              - nomad_new_clients
              - consul_new_clients
              - consul_new
              - nomad_new
          with_items: "{{ all_wn }}"

        - name: Add new gpu clients
          add_host:
            name: '{{ inventory_hostname }}'
            groups:
              - nomad_new_gpu_clients
          when: nvidia_support

    - when: consul_join == ''
      block:

        - name: Set consul_master and nomad_master
          add_host:
            name: "{{ groups['front'][0] }}"
            groups:
              - consul_master
              - nomad_master

        - name: Add servers to other server nodes
          add_host:
            name: '{{ item }}'
            groups:
              - nomad_servers
              - consul_servers
              - consul
              - nomad
          with_items: "{{ groups['front'] }}"

        - name: Enable Traefik
          add_host:
            name: "{{ groups['wn_pub'][0] }}"
            groups:
              - traefik_master
          when: launch_traefik and 'wn_pub' in groups and groups['wn_pub'] | length > 0

        - name: Add client groups
          add_host:
            name: '{{ item }}'
            groups:
              - nomad_cpu_clients
              - nomad_clients
              - consul_clients
              - consul
              - nomad
          with_items: "{{ all_wn }}"

        - name: Add gpu clients
          add_host:
            name: '{{ inventory_hostname }}'
            groups:
              - nomad_gpu_clients
          when: nvidia_support

    - name: Create Ansible roles dir
      file:
        path: /etc/ansible/roles
        state: directory
        mode: '755'

    - name: Install Nomad role
      copy:
        src: /opt/ai4-ansible/roles/nomad/
        dest: /etc/ansible/roles/nomad
        mode: '755'
        remote_src: true

    - name: Install Consul role
      copy:
        src: /opt/ai4-ansible/roles/consul/
        dest: /etc/ansible/roles/consul
        mode: '755'
        remote_src: true

    - name: Include roles vars
      include_vars:
        file: /opt/ai4-ansible/group_vars/all.yml

    - name: Set facts
      set_fact:
        consul_servers_ip: "{{ server_list }}"
        from_scratch_cluster_installation: true

    - name: Set facts
      set_fact:
        consul_servers_ip: "{{ consul_servers_ip + [consul_join] }}"
        from_scratch_cluster_installation: false
      when: consul_join != ''

    - name: Set facts
      set_fact:
        consul_public_ip: "{{ server_list[0] }}"
        my_ip: "{{ server_private_ip }}"
        my_public_ip: "{{ server_public_ip }}"
        username: cloudadm
        path: /opt/cloudadm/
        nomad_dc: "{{ nomad_input_dc | default('ifca-ai4eosc') }}"
        consul_dc_name: "{{ nomad_input_dc | default('ifca-ai4eosc') }}"
        primary_datacenter: "{{ consul_primary_datacenter }}"
        domain: "{{ nomad_input_domain | default('ifca') }}"
        nomad_namespaces: "{{ nomad_input_namespaces | default(['ai4eosc', 'imagine', 'tutorials']) }}"
        nomad_version: "{{ nomad_input_version | default('1.7.3') }}"
        consul_version: "{{ consul_input_version | default('1.17.1') }}"
        roles_dir: /opt/ai4-ansible/
        new_certs: "{{ nomad_input_dc | default('ifca-ai4eosc') }}-certs"

    - name: Download consul + nomad certs
      get_url:
        url: "{{ certs_url }}"
        dest: "{{ path }}{{ new_certs }}.zip"
        owner: cloudadm
        mode: '0755'
      when: certs_url != ''

    - name: Invoke consul role
      include_role:
        name: consul

    - name: Invoke nomad role
      include_role:
        name: nomad

    - when: API_HOST != '' and DASHBOARD_HOST != ''
      block:

        - name: Get list of running jobs
          command: nomad job status -namespace ai4eosc
          register: nomad_jobs
          changed_when: false

        - name: Check if a api-dashboard job is running
          set_fact:
            api_dashboard_running: "{{ 'api-dashboard' in nomad_jobs.stdout }}"
          changed_when: false

        - when: not api_dashboard_running
          block:

            - name: Creat API-Dashboard job file
              copy:
                dest: "{{ path }}/api-dashboard.hcl"
                owner: cloudadm
                mode: '0755'
                content: |
                  job "api-dashboard" {
                    namespace = "ai4eosc"
                    type      = "service"
                    id        = "api-dashboard"
                    priority  = "50"
                    group "usergroup" {
                      network {
                        port "api" {
                          to = 80
                        }
                        port "dashboard" {
                          to = 80
                        }
                      }
                      service {
                        name = "ai4eosc-service"
                        port = "dashboard"
                        tags = [
                          "traefik.enable=true",
                          "traefik.http.routers.ai4eosc.tls=true",
                          "traefik.http.routers.ai4eosc.rule=Host(`{{ DASHBOARD_HOST }}`)",
                          "traefik.http.routers.ai4eosc.tls.certresolver=letsencrypt",
                        ]
                      }
                      service {
                        name = "api-ai4eosc-service"
                        port = "api"
                        tags = [
                          "traefik.enable=true",
                          "traefik.http.routers.api-ai4eosc.tls=true",
                          "traefik.http.routers.api-ai4eosc.rule=Host(`{{ API_HOST }}`)",
                          "traefik.http.routers.api-ai4eosc.tls.certresolver=letsencrypt",
                        ]
                      }
                      ephemeral_disk {
                        size = 500
                      }
                      task "api" {
                        driver = "docker"
                        config {
                          force_pull = true
                          image   = "registry.services.ai4os.eu/ai4os/ai4-papi:nomad"
                          ports   = ["api"]
                          volumes    = [
                            "/etc/nomad.d/certs:/home/nomad-certs",
                          ]
                        }
                        env {
                          DASHBOARD_URL = "https://{{ DASHBOARD_HOST }}"
                          NOMAD_ADDR        = "https://{{ server_private_ip }}:4646"
                          NOMAD_CACERT      = "/home/nomad-certs/nomad-ca.pem"
                          NOMAD_CLIENT_CERT = "/home/nomad-certs/nomad-cli.pem"
                          NOMAD_CLIENT_KEY  = "/home/nomad-certs/nomad-cli-key.pem"
                      }
                        resources {
                          cores  = 1
                          memory = 500
                        }
                      }
                      task "dashboard" {
                        driver = "docker"
                        config {
                          force_pull = true
                          image   = "registry.services.ai4os.eu/ai4os/ai4eosc-dashboard:ai4-dashboard-nomad"
                          ports   = ["dashboard"]
                        }
                        env {
                          API_SERVER = "https://{{ API_HOST }}/v1"
                          CLIENT_ID = "{{ OIDC_CLIENT_ID }}"
                          ISSUER = "{{ OIDC_ISSUER }}"
                          DUMMY_CLIENT_SECRET = "{{ OIDC_CLIENT_SECRET }}"
                      }
                        resources {
                          cores  = 1
                          memory = 500
                        }
                      }
                    }
                  }

            - name: "Run api-dashboard job"
              command: nomad job run api-dashboard.hcl
              args:
                chdir: "{{ path }}"
              async: 120
              poll: 5
