---
- hosts: localhost
  connection: local
  vars:
    vnode_prefix: vnode-
    export_hosts: "*.localdomain"
    export_line: "(fsid=0,rw,async,no_root_squash,no_subtree_check,insecure)"
    nfs_path: "{{ kube_nfs_path | default('/pv') }}"
    csi_driver: "{{ kube_csi_driver | default('NFS') }}"
    admin_username: "{{ kube_admin_username | default('admin') }}"
    admin_token: "{{ kube_admin_token | default(lookup('password', '/var/tmp/kubeadminpass chars=ascii_letters,digits length=16')) }}"
    use_public_ip: "{{ kube_use_public_ip | default(false) }}"

  pre_tasks:
    - name: Set the admin token
      set_fact:
        admin_token: "{{ lookup('password', '/var/tmp/kubeadminpass chars=ascii_letters,digits length=16') }}"
      when: admin_token == ''
    - name: Create dir for the NFS PV
      file: path={{ nfs_path }} state=directory mode=755
    - name: Create auth file dir
      file: path=/etc/kubernetes/pki state=directory mode=755 recurse=yes
    - name: Create auth data file with an admin user
      copy: content='{{ admin_token }},{{ admin_username }},100,"users,system:masters"' dest=/etc/kubernetes/pki/auth mode=600
    - name: Do not use fsid=0 in Ubuntu 20.04
      set_fact:
        export_line: "(rw,async,no_root_squash,no_subtree_check,insecure)"
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version | int >= 20
    - name: Do not use *.localdomain in EC2
      set_fact:
        export_hosts: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"
      when: IM_NODE_CLOUD_TYPE is defined and IM_NODE_CLOUD_TYPE == 'EC2'
    - name: Set to install Longhorn CSI driver
      set_fact:
        kube_install_longhorn: true
      when: csi_driver == 'Longhorn'
    # Avoid error in ntp installation in Debian
    - name: Remove systemd-timesyncd in Debian systems
      package:
        name: systemd-timesyncd
        state: absent
      ignore_errors: true
      when: ansible_os_family == "Debian"
    - name: Stop and disable firewalls
      service:
        name: "{{ item }}"
        enabled: false
        state: stopped
      ignore_errors: true
      loop:
        - ufw
        - firewalld
    - name: Set the public front end IP
      set_fact:
        kube_front_end_ip: "{{ kube_public_front_end_ip }}"
      when: use_public_ip
  roles:
    - role: grycap.nfs
      nfs_mode: 'front'
      nfs_exports: [{path: '{{ nfs_path }}', export: '{{ export_hosts }}{{ export_line }}'}]
      when: csi_driver == 'NFS'
    - role: grycap.kubernetes
      kube_server: '{{ kube_front_end_ip }}'
      kube_api_server: '{{ kube_front_end_ip }}'
      kube_apiserver_options:
        - {option: "--service-node-port-range", value: "80-35000"}
        - {option: "--token-auth-file", value: "/etc/kubernetes/pki/auth"}
      kube_install_metrics: true
      kube_cert_public_ip: "{{ IM_NODE_PUBLIC_IP }}"
      kube_install_helm_version: "v3.8.2"

  tasks:
    - name: Read kubeconfig file
      slurp: src=/etc/kubernetes/admin.conf
      register: slurpfile
      ignore_errors: true
    - name: kube_conf
      debug: msg="{{ slurpfile['content'] | b64decode | replace(IM_NODE_PRIVATE_IP, IM_NODE_PUBLIC_IP) }}"
      ignore_errors: true
