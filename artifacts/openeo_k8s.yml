---
- hosts: localhost
  connection: local
  vars:
    stac_url: "{{ openeo_stac_url | default('https://dev.stac.eodc.eu/api/v1') }}"
    oidc_url: "{{ openeo_oidc_url | default('https://aai.egi.eu/auth/realms/egi') }}"
    oidc_organisation: "{{ openeo_oidc_organisation | default('egi') }}"
    oidc_roles: "{{ openeo_oidc_roles | default(['']) }}"
    executor_version: "{{ openeo_executor_version | default('2024.9.2') }}"
    api_version: "{{ openeo_api_version | default('2024.11.10') }}"
    dask_worker_cores: "{{ openeo_dask_worker_cores | default(1) }}"
    dask_worker_memory: "{{ openeo_dask_worker_memory | default(2) }}"
    cors_origin: "{{ openeo_cors_origin | default('') }}"
    cors_enabled: "false"
  tasks:
    - name: Set default DNS name (nip.io)
      set_fact:
        dns_name: "openeo.{{ public_ip_address }}.nip.io"
      when: openeo_dns_name is not defined or openeo_dns_name == ""
    - name: Set custom DNS name
      set_fact:
        dns_name: "{{ openeo_dns_name }}"
      when: openeo_dns_name is defined and openeo_dns_name != ""
    - name: Enable CORS
      set_fact:
        cors_enabled: "true"
      when: cors_origin != ""
    - name: Create OpenEO Helm values file
      copy:
        dest: /tmp/openeo_config.yaml
        mode: '644'
        content: |
          global:
            env:
              alembicDir: "/opt/openeo_argoworkflows_api/psql"
              apiDns: {{ dns_name }}
              apiTLS: true
              apiTitle: "OpenEO ArgoWorkflows"
              apiDescription: "A K8S deployment of the openeo api for argoworkflows."
              oidcUrl: "{{ oidc_url }}"
              odicOrganisation: "{{ oidc_organisation }}"
              oidcPolicies: {{ oidc_roles }}
              stacCatalogueUrl: "{{ stac_url }}"
              workspaceRoot: "/user_workspaces"
              executorImage: "ghcr.io/eodcgmbh/openeo-argoworkflows:executor-{{ executor_version }}"
              daskWorkerCores: "{{ dask_worker_cores }}"
              daskWorkerMemory: "{{ dask_worker_memory }}"
              daskWorkerLimit: "6"
              daskClusterTimeout: "3600"
          image:
            repository: ghcr.io/eodcgmbh/openeo-argoworkflows
            # Overrides the image tag whose default is the chart appVersion.
            tag: "api-{{ api_version }}"
          persistence:
            capacity: "8Gi"
          ingress:
            enabled: true
            className: "nginx"
            tls:
              - secretName: openeo-tls
                hosts:
                  - {{ dns_name }}
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
              nginx.ingress.kubernetes.io/proxy-read-timeout: '1800'
              nginx.ingress.kubernetes.io/client-body-buffer-size: "64k"
              nginx.ingress.kubernetes.io/proxy-body-size: "20m"
              nginx.ingress.kubernetes.io/cors-allow-origin: "{{ cors_origin }}"
              nginx.ingress.kubernetes.io/enable-cors: "{{ cors_enabled }}"
            hosts:
              - host: {{ dns_name }}
                paths:
                  - path: /
                    pathType: ImplementationSpecific

    - name: Install git
      package:
        name: git
        state: present

    - name: Download Helm chart
      git:
        repo: https://github.com/eodcgmbh/charts
        dest: /opt/eodcgmbh-charts
        version: main
        force: false

    - name: Install Helm repositories
      command: helm repo add {{ item.name }} {{ item.url }}
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: helm_repo
      changed_when: "'already exists' not in helm_repo.stdout"
      loop:
        - { name: "bitnami", url: "https://charts.bitnami.com/bitnami" }
        - { name: "argo", url: "https://argoproj.github.io/argo-helm" }
        - { name: "dask", url: "https://helm.dask.org" }

    - name: Install Helm dependencies
      command: helm dependency build
      args:
        chdir: /opt/eodcgmbh-charts/eodc/openeo-argo
        creates: /opt/eodcgmbh-charts/eodc/openeo-argo/charts
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Create namespace
      command: kubectl create namespace openeo
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      failed_when: false
      register: namespace
      changed_when: "'AlreadyExists' not in namespace.stdout"

    - name: "Check if OpenEO is already deployed"
      command: helm status openeo -n openeo
      register: deployed
      failed_when: deployed.rc != 0 and deployed.rc != 1
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Install OpenEO Helm chart
      command: helm upgrade -n openeo --install openeo /opt/eodcgmbh-charts/eodc/openeo-argo --values /tmp/openeo_config.yaml --wait --timeout 10m
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      when: deployed.rc == 1

    - name: Wait OpenEO POD to start
      command: kubectl wait --for=condition=Available deployment -n openeo openeo-openeo-argo --timeout=300s
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
