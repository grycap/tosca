tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml


description: Deploy Jupyter Notebook.

metadata:
  template_version: '1.0.0'
  template_name: Jupyter Notebook
  display_name: Deploy Jupyter Notebook

topology_template:
  inputs:

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GiB
    disk_size:
      type: scalar-unit.size
      description: Size of the root disk of the VM (in case of 0 disk will no be resized)
      default: 20 GiB

    storage_size:
      type: scalar-unit.size
      description: Size of the extra HD added to the instance
      default: 50 GiB
    mount_path:
      type: string
      description: Path to mount the extra disk
      default: /opt/jupyter

    num_gpus:
      type: integer
      description: Number of GPUs to assing to this VM
      default: 0

    jupyter_token:
      default: changeme
      description: Token to access Jupyter
      type: string
    dns_name:
      default: jupyter.test.fedcloud.eu
      description: DNS hostname to access Jupyter Notebook
      type: string
    letsencrypt_email:
      default: changeme@email.com
      description: Email to be used for Let's Encrypt certificates
      type: string

    # Dataset download inputs
    dataset_id:
      type: string
      description: URL or DOI of the data to Download.
      default: 'https://doi.org/10.60717/17114434-6bb9-4f3c-865f-59395b7c38c3'

    filter:
      type: string
      description: Regular expression to filter the files to download
      default: '.*'

    dest:
      type: string
      description: Local path where the dataset will be downloaded (do not change)
      default: /opt/jupyter/notebooks

    owner:
      type: string
      description: Change the ownership of the directory where the dataset should be saved (do not change).
      default: '1000'

  node_templates:

    # A Dataset downloaded directly to the local filesystem
    my_dataset:
      type: tosca.nodes.eosc.Dataset
      properties:
        dataset_id: { get_input: dataset_id }
        filter: { get_input: filter }
        dest: { get_input: dest }
        owner: { get_input: owner }
      requirements:
        - host: simple_node

    jupyter:
      type: tosca.nodes.ec3.Application
      artifacts:
        docker_role:
          file: grycap.docker
          type: tosca.artifacts.AnsibleGalaxy.role
      capabilities:
        endpoint:
          properties:
            ports:
              port_http:
                protocol: tcp
                source: 80
              port_https:
                protocol: tcp
                source: 443
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/main/artifacts/juno_compose.yml
            inputs:
              letsencrypt_email: { get_input: letsencrypt_email }
              jupyter_token: { get_input: jupyter_token }
              jupyter_dns_name: { get_input: dns_name }
              jupyter_public_ip: { get_attribute: [ simple_node, public_address, 0 ] }
      requirements:
        - host: simple_node

    simple_node:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            additional_dns_names:
              - { get_input: dns_name }
        host:
          properties:
            disk_size: { get_input: disk_size }
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
            num_gpus: { get_input: num_gpus }
        os:
          properties:
            type: linux
      requirements:
        - local_storage:
            node: my_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: mount_path }

    my_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }

  outputs:
    jupyter_url:
      value: { concat: [ 'https://', get_attribute: [ simple_node, public_address, 0 ], '/' ] }
    jupyter_url_dns:
      value: { concat: [ 'https://', get_input: [ dns_name ], '/' ] }
