tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: >
  Install a Jupyter-Ophidia-based environment on top of a Kubernetes Cluster.
  (Remember to set Cert-Manager and DNS name in Kubernetes Data).

metadata:
  template_version: "1.0.0"
  template_name: Jupyter-Ophidia-based environment
  display_name: Jupyter-Ophidia-based environment on top of Kubernetes
  icon: images/ophidia.png
  tabs:
    Ophidia Data:
      - jupyterhub_crypt_key
      - enes_oidc_issuer
      - enes_client_id
      - enes_client_secret
  parents:
    - kubernetes.yaml

topology_template:

  inputs:
    jupyterhub_crypt_key:
      type: string
      description: Hex-encoded 32-byte key to crypt jupyterhub ('openssl rand -hex 32')
      default: c924b40b9ae0afba637e297773d27a50c3e9ba4c8a7910f0dd826df1e6c2104d
      required: yes
    enes_oidc_issuer:
      type: string
      description: OIDC Issuer URL
      default: 'https://aai.egi.eu/auth/realms/egi'
      required: yes
      constraints:
        - valid_values:
            - 'https://aai.egi.eu/auth/realms/egi'
            - 'https://aai-demo.egi.eu/auth/realms/egi'
            - 'https://aai-dev.egi.eu/auth/realms/egi'
    enes_client_id:
      type: string
      description: OIDC Client ID
      default: ''
      required: yes
    enes_client_secret:
      type: string
      description: OIDC Client Secret
      default: ''
      required: yes

    # Restrict some K8s input values
    wn_disk_size:
      type: scalar-unit.size
      description: Size of the root disk of the WNs
      default: 100 GiB
      constraints:
        - valid_values: [ 100 GiB, 200 GiB ]


  node_templates:

    enes:
      type: tosca.nodes.SoftwareComponent
      requirements:
        - host: lrms_front_end
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/main/artifacts/enes/ophidia_intertwin.yml
            inputs:
              enes_dns_name: { get_input: kube_public_dns_name }
              enes_jupyterhub_crypt_key: { get_input: jupyterhub_crypt_key }
              enes_oidc_issuer: { get_input: enes_oidc_issuer }
              enes_client_secret: { get_input: enes_client_secret }
              enes_client_id: { get_input: enes_client_id }

  outputs:
    jupyterhub_url:
      value: { concat: [ 'https://', get_input: kube_public_dns_name, '/jupyter/' ] }
