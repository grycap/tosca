tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/custom_types.yaml

description: Deploy JupyterHub on top of a Kubernetes Virtual Cluster.

metadata:
  template_version: "1.1.0"
  template_name: JupyterHub
  display_name: Deploy JupyterHub on top of a Kubernetes Virtual Cluster
  icon: images/jupyterhub.png
  tabs:
    JupyterHub: .*
  parents:
    - kubernetes.yaml

topology_template:

  inputs:

    auth_class:
      type: string
      description: Athenticator class
      default: dummy
      constraints:
        - valid_values: [ "dummy", "nativeauthenticator.NativeAuthenticator" ]

    dummy_password:
      type: string
      description: Password used to authenticate in case of using the dummy authenticator
      default: not_very_secret_pass

    admin_user:
      type: string
      description: Username of the Administrator user
      default: admin

    data_url:
      type: string
      description: URL of data to be downloaded and stored in the JupyterHub PVC.
      default: ''

    unarchive:
      type: boolean
      description: Unarchive the downloaded file.
      default: false
      constraints:
        - valid_values: [ false, true ]

  node_templates:

    jupyterhub:
      type: tosca.nodes.ec3.Application
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/jupyter/jupyterhub_k8s.yml
            inputs:
              authenticator_class: { get_input: [ auth_class ] }
              dummy_pass: { get_input: [ dummy_password ] }
              admin_user: { get_input: [ admin_user ] }
      requirements:
        - host: front
        - dependency: lrms_front_end

    get_data:
      type: tosca.nodes.SoftwareComponent
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v1.0.0/artifacts/download_data.yml
            inputs:
              data_url: { get_input: data_url }
              k8s_pvc_namespace: jupyter
              k8s_pvc_name: claim-data
              unarchive_file: { get_input: unarchive }
      requirements:
        - host: lrms_front_end

  outputs:
    jupyterhub_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/jupyterhub/' ] }
