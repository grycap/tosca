tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: Deploy JupyterHub on top of a Kubernetes Virtual Cluster.

metadata:
  template_version: "1.2.1"
  template_name: JupyterHub
  display_name: Deploy JupyterHub on top of a Kubernetes Virtual Cluster
  icon: images/jupyterhub.png
  tabs:
    JupyterHub:
      - auth_class
      - dummy_password
      - admin_user
      - install_data_mount
  parents:
    - kubernetes.yaml

topology_template:

  inputs:

    auth_class:
      type: string
      description: Athenticator class
      default: dummy
      constraints:
        - valid_values: [ "dummy", "nativeauthenticator.NativeAuthenticator" ]

    dummy_password:
      type: string
      description: Password used to authenticate in case of using the dummy authenticator
      default: not_very_secret_pass

    admin_user:
      type: string
      description: Username of the Administrator user
      default: admin

    install_data_mount:
      type: boolean
      description: Whether to install the DataMountSpawner extension
      default: false
      constraints:
        - valid_values: [ false, true ]

    # Overwrite default Dataset list values

    pvc_name:
      type: string
      description: Name of the PVC where the dataset will be downloaded (only for Kubernetes deployments)
      default: 'claim-data'

    pvc_namespace:
      type: string
      description: Namespace of the PVC where the dataset will be downloaded (only for Kubernetes deployments)
      default: 'jupyter'

  node_templates:

    jupyterhub:
      type: tosca.nodes.ec3.Application
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/main/artifacts/jupyter/jupyterhub_k8s.yml
            inputs:
              authenticator_class: { get_input: [ auth_class ] }
              dummy_pass: { get_input: [ dummy_password ] }
              admin_user: { get_input: [ admin_user ] }
              install_data_mount: { get_input: [ install_data_mount ] }
              kube_public_dns_name: { get_input: kube_public_dns_name}
      requirements:
        - host: front
        - dependency: lrms_front_end

  outputs:
    jupyterhub_dns_endpoint:
      value: { concat: [ 'https://', get_input: kube_public_dns_name, '/jupyterhub/' ] }
    jupyterhub_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/jupyterhub/' ] }
