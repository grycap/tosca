tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

metadata:
  template_version: "1.0.0"
  template_name: Apache Airflow
  display_name: Deploy Apache Airflow on top of a Kubernetes Virtual Cluster
  icon: images/airflow.png
  tabs:
    Airflow Data: airflow_.*
  parents:
    - kubernetes.yaml

description: TOSCA template for launching Apache Airflow on top of a Kubernetes Virtual Cluster.

topology_template:

  inputs:

    airflow_admin_password:
      type: string
      description: Airflow Webserver admin password
      default: 'admin'
    airflow_webserver_secret_key:
      type: string
      description: Airflow Webserver secret key (python3 -c 'import secrets; print(secrets.token_hex(16))')
      default: 'dcafd3b88f9931cb68b41ec596bb4a24'
    airflow_dags_repo:
      type: string
      description: Airflow DAGs git repository url
      default: ''
    airflow_dags_repo_subpath:
      type: string
      description: Airflow DAGs git repository subpath
      default: ''
    airflow_dags_branch:
      type: string
      description: Airflow DAGs git repository branch
      default: 'master'

  node_templates:

    airflow:
      type: tosca.nodes.indigo.Helm.Chart
      properties:
        version: '1.11.0'
        namespace: airflow
        repository_name: apache-airflow
        repository_url: "https://airflow.apache.org"
        name: airflow
        values:
          webserver.defaultUser.password: { get_input: airflow_admin_password }
          webserverSecretKey: { get_input: airflow_webserver_secret_key }
          dags.gitSync.enabled: "true"
          dags.gitSync.repo: { get_input: airflow_dags_repo }
          dags.gitSync.subPath: { get_input: airflow_dags_repo_subpath }
          dags.gitSync.branch: { get_input: airflow_dags_branch }
      requirements:
        - host: front
        - dependency: lrms_front_end

    airflow_ingress:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: airflow-ingress
            namespace: airflow
          spec:
            ingressClassName: 'nginx'
            rules:
            - http:
                paths:
                - path: /
                  backend:
                    service:
                      name: airflow-webserver
                      port:
                        name: airflow-ui
                  pathType: ImplementationSpecific
      requirements:
        - host: lrms_front_end
        - dependency: airflow


  outputs:
    airflow_dashboard:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/' ] }
