tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v2.0.0/custom_types.yaml

description: Deploy Galaxy on top of a Kubernetes Virtual Cluster.

metadata:
  template_version: "1.0.0"
  template_name: Galaxy
  display_name: Galaxy on top of a Kubernetes Virtual Cluster
  icon: images/galaxy.png
  web: https://galaxyproject.org/
  parents:
    - kubernetes.yaml
  tabs:
    Galaxy: galaxy_.*

topology_template:

  inputs:
    galaxy_admin_users:
      type: string
      description: Administrative users - set this to a comma-separated list of valid Galaxy users (email addresses).
      default: 'admin@admin.com'
    galaxy_brand:
      type: string
      description: Brand for the Galaxy instance
      default: 'IM Deployed Galaxy K8s Cluster'

    # Restrict some K8s input values

    kube_cri_runtime:
      type: string
      description: CRI Runtime to use with Kubernetes
      default: "docker"
      constraints:
        - valid_values: [ docker ]
    wn_num:
      type: integer
      description: "Number of WNs in the cluster (Minimum recommended: 3)"
      default: 3
      required: yes
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 4
      required: yes
      constraints:
        - valid_values: [ 4, 8, 16, 32, 64 ]
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 8 GiB
      required: yes
      constraints:
        - valid_values: [ 8 GiB, 16 GiB, 32 GiB, 64 GiB, 128 GiB, 256 GiB, 512 GiB ]


  node_templates:

    galaxy:
      type: tosca.nodes.ec3.Application
      requirements:
        - host: front
        - dependency: lrms_front_end
      interfaces:
        Standard:
          configure:
            implementation: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v2.0.0/artifacts/k8s_galaxy.yml
            inputs:
              galaxy_admin_users: { get_input: galaxy_admin_users }
              galaxy_brand: { get_input: galaxy_brand }
              galaxy_max_mem: { get_input: wn_mem }
              galaxy_max_cores: { get_input: wn_cpus }

  outputs:
    galaxy_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/galaxy/' ] }
