tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/refs/tags/v2.0.0/custom_types.yaml

description: Deploy a Node-RED on top of a Kubernetes Virtual Cluster.

metadata:
  template_version: "1.0.0"
  template_name: Node-RED
  display_name: Deploy a Node-RED on top of a Kubernetes Virtual Cluster
  icon: images/nodered.png
  tabs:
    Node-RED: nodered_.*
  parents:
    - kubernetes.yaml
    - oscar.yaml

topology_template:
  inputs:

    nodered_admin_username:
      type: string
      description: Name of the full admin user
      default: admin
      required: yes
    nodered_admin_password:
      type: string
      description: "Password of the full admin user (adminpass). See how to get it https://nodered.org/docs/user-guide/runtime/securing-node-red#generating-the-password-hash"
      default: "$2b$08$BZqMjl9G.0itJFac/WY3mea/Oq1HCiYO3DGcQ9Uc8pldFdfVN/fvi"
      required: yes

  node_templates:

    noderedns:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: 'nodered'
      requirements:
        - host: lrms_front_end

    noderedpvc:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            namespace: nodered
            name: noderedpvc
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
      requirements:
        - host: lrms_front_end
        - dependency: noderedns

    noderedconfig:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec:
          concat:
            - |-
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  namespace: nodered
                  name: noderedcm
                data:
                  settings.js: |
                    module.exports = {
                      flowFile: 'flows.json',
                      flowFilePretty: true,
                      uiPort: process.env.PORT || 1880,
                      httpAdminRoot: '/nodered',
                      diagnostics: {
                          enabled: true,
                          ui: true
                      },
                      runtimeState: {
                          enabled: false,
                          ui: false
                      },
                      logging: {
                        console: {
                          level: 'info',
                          metrics: false,
                          audit: false
                        }
                      },
                      exportGlobalContextKeys: false,
                      editorTheme: {
                        projects: {
                          enabled: false,
                          workflow: {
                            mode: 'manual'
                          }
                        },
                        codeEditor: {
                          lib: 'monaco'
                        }
                      },
                      functionExternalModules: true,
                      debugMaxLength: 1000,
                      mqttReconnectTime: 15000,
                      serialReconnectTime: 15000,
                      adminAuth: {
                          type: 'credentials',
                          users: [
                              {
                                  username: '
            - get_input: nodered_admin_username
            - |-
                ',
                                  password: '
            - get_input: nodered_admin_password
            - |-
                ',
                                  permissions: '*'
                              }
                          ]
                      }
                    }
      requirements:
        - host: lrms_front_end
        - dependency: noderedns

    nodered:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            annotations:
            labels:
              app: nodered
            name: nodered
            namespace: nodered
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nodered
            template:
              metadata:
                labels:
                  app: nodered
              spec:
                restartPolicy: Always
                volumes:
                  - name: noderedconfig
                    configMap:
                      name: noderedcm
                  - name: nodered
                    persistentVolumeClaim:
                      claimName: noderedpvc
                containers:
                  - name: nodered
                    image: nodered/node-red
                    ports:
                      - containerPort: 1880
                        name: nodered
                    resources:
                      requests:
                        memory: 512Mi
                        cpu: 250m
                    startupProbe:
                      failureThreshold: 60
                      periodSeconds: 10
                      tcpSocket:
                        port: 1880
                    livenessProbe:
                      periodSeconds: 20
                      tcpSocket:
                        port: 1880
                    volumeMounts:
                      - name: nodered
                        mountPath: /data
                      - name: noderedconfig
                        mountPath: /data/settings.js
                        subPath: settings.js

      requirements:
        - host: lrms_front_end
        - dependency: noderedns

    nodered_service:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: v1
          kind: Service
          metadata:
            namespace: nodered
            labels:
              app: nodered
            name: service-nodered
          spec:
            ports:
              - name: nodered
                port: 1880
                targetPort: 1880
            selector:
              app: nodered
      requirements:
        - host: lrms_front_end
        - dependency: noderedns

    nodered_ingress:
      type: tosca.nodes.indigo.KubernetesObject
      properties:
        spec: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: nodered
            namespace: nodered
            annotations:
              kubernetes.io/ingress.class: 'nginx'
          spec:
            rules:
            - http:
                paths:
                - path: /nodered
                  backend:
                    service:
                      name: service-nodered
                      port:
                        number: 1880
                  pathType: Prefix
      requirements:
        - host: lrms_front_end
        - dependency: noderedns

  outputs:
    nodered_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/nodered/' ] }
