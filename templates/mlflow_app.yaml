tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: MLFlow container applitacion

metadata:
  template_name: MLFlow
  template_version: "1.0.0"
  template_author: Miguel Caballer
  creation_date: 2024-02-16
  # namespace: namespace

topology_template:

  inputs:
    cpu:
      type: float
      description: Number of virtual cpus for the container
      default: 1.0
    memory:
      type: scalar-unit.size
      description: Memory size for the container
      default: 2 GB

    pvc_size:
      type: scalar-unit.size
      description: Size of the Persistent Volume Claim
      default: 10 GB
    endpoint:
      type: string
      description: DNS name to access the MLFlow instance
      default: mlflow.eu-1.open-science-cloud-user-apps.eu


  node_templates:

    mlflow_app:
      type: tosca.nodes.Container.Application.Docker
      properties:
        command:
          concat:
            - "mlflow server --app-name basic-auth --host 0.0.0.0 --default-artifact-root /data/mlartifacts --backend-store-uri"
            - " mysql+pymysql://root:mysql_root_password@"
            - { get_attribute: [ mysql_container, endpoints, 0 ] }
            - "/mlflowdb"
      requirements:
        - host: mlflow_runtime
      artifacts:
        my_image:
          file: grycap/mlflow:2.14.3
          type: tosca.artifacts.Deployment.Image.Container.Docker
        config_map:
          file: "basic_auth.ini"
          type: tosca.artifacts.File
          deploy_path: "/usr/local/lib/python3.8/site-packages/mlflow/server/auth/basic_auth.ini"
          properties:
            content: |
              [mlflow]
              default_permission = READ
              database_uri = sqlite:///data/basic_auth.db
              admin_username = admin
              admin_password = mlflow_password
              authorization_function = mlflow.server.auth:authenticate_request_basic_auth

    # The properties of the runtime to host the container
    mlflow_runtime:
      type: tosca.nodes.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: { get_input: cpu }
            mem_size: { get_input: memory }
            publish_ports:
              - target: 5000
                source: 32050
                endpoint: { get_input: endpoint }
            volumes:
              - "container_vol:/data"

    container_vol:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: pvc_size }
        # Set the PV name in this field
        # volume_id: "PV name"


    # The MYSQL container based on official MySQL image in Docker hub
    mysql_container:
      type: tosca.nodes.Container.Application.Docker
      properties:
        environment:
          MYSQL_ROOT_PASSWORD: mysql_root_password
          MYSQL_DATABASE: "mlflowdb"
      requirements:
        - host: mysql_runtime
      artifacts:
        my_image:
          file: "mysql:8"
          type: tosca.artifacts.Deployment.Image.Container.Docker

    # The properties of the runtime to host the container
    mysql_runtime:
      type: tosca.nodes.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: 1.0
            mem_size: 2 GB
            expose_ports:
              - protocol: tcp
                target: 3306
            volumes:
              - "mysql_vol:/var/lib/mysql"

    mysql_vol:
      type: tosca.nodes.BlockStorage
      properties:
        size: 10 GB
        # Set the PV name in this field
        # volume_id: "PV name"

  outputs:
    mlflow_url:
      value: { get_attribute: [ mlflow_app, endpoints, 0 ] }
